diff --git a/Child/Code/ChildInterface/child.cpp b/Child/Code/ChildInterface/child.cpp
index 0969a3e..e60921a 100644
--- a/Child/Code/ChildInterface/child.cpp
+++ b/Child/Code/ChildInterface/child.cpp
@@ -560,10 +560,10 @@ double Child::RunOneStorm() {
   
   time->Advance( stormPlusDryDuration );
 	
-  if( output > 0 && time->CheckOutputTime() )
+  if( output > nullptr && time->CheckOutputTime() )
     output->WriteOutput( time->getCurrentTime() );
 	
-  if( output > 0 && output->OptTSOutput() ) output->WriteTSOutput();
+  if( output > nullptr && output->OptTSOutput() ) output->WriteTSOutput();
   
   return( time->getCurrentTime() );
 }
diff --git a/Child/Code/ChildInterface/childInterface.cpp b/Child/Code/ChildInterface/childInterface.cpp
index 3317581..5137064 100644
--- a/Child/Code/ChildInterface/childInterface.cpp
+++ b/Child/Code/ChildInterface/childInterface.cpp
@@ -859,10 +859,10 @@ RunOneStorm()
   
   time->Advance( stormPlusDryDuration );
 	
-  if( output > 0 && time->CheckOutputTime() )
+  if( output > nullptr && time->CheckOutputTime() )
     output->WriteOutput( time->getCurrentTime() );
 	
-  if( output > 0 && output->OptTSOutput() ) output->WriteTSOutput();
+  if( output > nullptr && output->OptTSOutput() ) output->WriteTSOutput();
   
   return( time->getCurrentTime() );
 }
@@ -1174,7 +1174,7 @@ GetXCoordinate( int element_index, int vertex_index )
   tArray2<double> right_hand_voronoi_vertex_coords;
   
   my_node = ni.GetPByPermID( element_index );
-  if( my_node<=0 ) return( -9999 );   // Temporary hacked NODATA code
+  if( my_node <= nullptr ) return( -9999 );   // Temporary hacked NODATA code
   
   current_edge = my_node->getEdg();
   if( !current_edge ) return( -9999 );
@@ -1200,7 +1200,7 @@ GetYCoordinate( int element_index, int vertex_index )
   tArray2<double> right_hand_voronoi_vertex_coords;
   
   my_node = ni.GetPByPermID( element_index );
-  if( my_node<=0 ) return( -9999 );   // Temporary hacked NODATA code
+  if( my_node <= nullptr ) return( -9999 );   // Temporary hacked NODATA code
   
   current_edge = my_node->getEdg();
   if( !current_edge ) return( -9999 );
@@ -1231,7 +1231,7 @@ GetZCoordinate( int element_index, int vertex_index )
   
   // Get the node
   my_node = ni.GetPByPermID( element_index );
-  if( my_node<=0 ) return( -9999 );   // Temporary hacked NODATA code
+  if( my_node <= nullptr ) return( -9999 );   // Temporary hacked NODATA code
   
   // Get the right edge
   current_edge = my_node->getEdg();
diff --git a/Child/Code/Erosion/erosion.cpp b/Child/Code/Erosion/erosion.cpp
index f388592..063265e 100644
--- a/Child/Code/Erosion/erosion.cpp
+++ b/Child/Code/Erosion/erosion.cpp
@@ -2922,7 +2922,7 @@ double tChemicalWeatheringDissolution::SoluteFlux( tLNode * n, double dt )
       lP = lI.PrevP();
       tLayer lay;
       n->getLayersRefNC().removeNext( lay, lI.NodePtr() );
-      assert( n>0 );
+      assert( n > nullptr );
     }
   }
   // multiply by area for total mass flux:
@@ -3164,7 +3164,7 @@ void tDebrisFlow::Initialize( tPtrList<tLNode> &PList,
     // find triangle containing center of mass:
     tTriangle *gt = meshPtr->LocateTriangle( wtAvgX, wtAvgY );
     // if geometric center is within bounds:
-    if( gt>0 )
+    if( gt > nullptr )
     { // find triangle's node with greatest drainage area (and in cluster):
       double gArea = 0.0;
       for( int i=0; i < 3; ++i )
@@ -3466,7 +3466,7 @@ void tDF_ScourAllSediment::BedScour( tDebrisFlow* DF, tLNode* cn )
     cn->ChangeZ( -cl.getDepth() );
   }
   // remove biomass and add to debris flow tally:
-  if( cn->getVegCover().getTrees() > 0 )
+  if( cn->getVegCover().getTrees() > nullptr )
   {
     DF->addWoodVolume( ( cn->getVegCover().getTrees()->getBioMassStand()
                         + cn->getVegCover().getTrees()->getBioMassDown() )
@@ -3533,7 +3533,7 @@ void BuildPublicClusterWithMesh( tMesh<tLNode>* mesh,
 	      tTriangle *ct =  mesh->LocateTriangle( nn->getX(), nn->getY() );
 	      if( nn->public1 == 0 
            && 
-           ct > 0 
+           ct > nullptr 
            && 
            nn->getZ() <= PlaneFit( nn->getX(), nn->getY(), ct ) )
         {
@@ -3952,11 +3952,11 @@ tErosion::~tErosion(){
   delete sedTrans;
   delete physWeath;
   delete chemWeath;
-  if( runout > 0 ) delete runout;
-  if( scour > 0 ) delete scour;
-  if( deposit > 0 ) delete deposit;
-  if( DF_fsPtr > 0 ) delete DF_fsPtr;
-  if( DF_Hyd_fsPtr > 0 ) delete DF_Hyd_fsPtr;
+  if( runout > nullptr ) delete runout;
+  if( scour > nullptr ) delete scour;
+  if( deposit > nullptr ) delete deposit;
+  if( DF_fsPtr > nullptr ) delete DF_fsPtr;
+  if( DF_Hyd_fsPtr > nullptr ) delete DF_Hyd_fsPtr;
 }
 
 /**************************************************************************\
@@ -6471,7 +6471,7 @@ void tErosion::ProduceRegolith( double dtg, double time )
       for( size_t j=0; j<n->getNumg(); ++j ) 
         erolist[j] = soilDeltaH * rockP->getDgrade(j)/rockP->getDepth();
       // is there a soil layer?
-      if( soilP > 0 )
+      if( soilP > nullptr )
         // yes; add material to layer above top rock layer:
         n->EroDep( i-1, erolist, time );
       else
@@ -6599,7 +6599,7 @@ void tErosion::LandslideClusters( double rainrate,
 	 cn=nodIter.NextP(), ++i )
     {
       nodeSoilThickness[i] = cn->getRegolithDepth();
-      if( cn->getVegCover().getTrees() > 0 )
+      if( cn->getVegCover().getTrees() > nullptr )
       {
         nodeWoodDepth[i] = 
 	  cn->getVegCover().getTrees()->getBioMassStand() 
@@ -6678,7 +6678,7 @@ void tErosion::LandslideClusters( double rainrate,
       const double costheta = cos( slopeangle );
       const double sintheta = sin( slopeangle );
       double basalCohesion = 0.0;
-      if( cn->getVegCover().getTrees() > 0 )
+      if( cn->getVegCover().getTrees() > nullptr )
 	basalCohesion = 
 	  cn->getVArea() / costheta
 	  * cn->getVegCover().getTrees()->getRootStrengthVert()
@@ -6996,7 +6996,7 @@ void tErosion::LandslideClusters3D( double rainrate,
 	      nodeSaturatedDepth[i] = nodeSoilThickness[i];
 	    nodeWaterDepth[i] = 
 	      nodeSaturatedDepth[i] * porosity; // water fraction
-	    if( cn->getVegCover().getTrees() > 0 )
+	    if( cn->getVegCover().getTrees() > nullptr )
 	      { // wood depth and root cohesion
 		nodeWoodDepth[i] = 
 		  cn->getVegCover().getTrees()->getBioMassStand() 
@@ -7082,7 +7082,7 @@ void tErosion::LandslideClusters3D( double rainrate,
 		nodeGradientY[i] += 
 		  weightedSlopeByLength * ce->getEVec().at(1);
 		// for lateral cohesion, sum up cohesion along edges:
-		if( cn->getVegCover().getTrees() > 0 )
+		if( cn->getVegCover().getTrees() > nullptr )
 		  nodeLatCohesion[i] += edgeLatCohesion[iEdge];
 	      }
 	    nodeGradientX[i] /= sumWeights;
@@ -7098,7 +7098,7 @@ void tErosion::LandslideClusters3D( double rainrate,
 	    nodeNetForceMag[i] = -nodeLatCohesion[i];
 	    // add basal root cohesion (resistance) to force balance
 	    // (uses flowedge surface slope angle):
-	    if( cn->getVegCover().getTrees() > 0 )
+	    if( cn->getVegCover().getTrees() > nullptr )
 	      nodeNetForceMag[i] -= 
 		cn->getVArea() / costheta
 		* cn->getVegCover().getTrees()->getRootStrengthVert()
diff --git a/Child/Code/Erosion/erosion.h b/Child/Code/Erosion/erosion.h
index 08e6a2c..1dfcdda 100644
--- a/Child/Code/Erosion/erosion.h
+++ b/Child/Code/Erosion/erosion.h
@@ -1000,13 +1000,13 @@ inline tDebrisFlow::~tDebrisFlow() {Finalize();}
 /***************************************************************************/
 inline void tDebrisFlow::Finalize()
 {
-  if( slideCluster > 0 ) delete slideCluster;
-  if( scourCluster > 0 ) delete scourCluster;
-  if( scourZoneMesh > 0 ) delete scourZoneMesh;
-  if( depositCluster > 0 ) delete depositCluster;
-  if( depositZoneMesh > 0 ) delete depositZoneMesh;
-  if( wasList > 0 ) delete wasList;
-  if( velocityList > 0 ) delete velocityList;
+  if( slideCluster > nullptr ) delete slideCluster;
+  if( scourCluster > nullptr ) delete scourCluster;
+  if( scourZoneMesh > nullptr ) delete scourZoneMesh;
+  if( depositCluster > nullptr ) delete depositCluster;
+  if( depositZoneMesh > nullptr ) delete depositZoneMesh;
+  if( wasList > nullptr ) delete wasList;
+  if( velocityList > nullptr ) delete velocityList;
 }
 /***************************************************************************/
 /**
@@ -1069,7 +1069,7 @@ public:
 /***************************************************************************/
 // just checks whether already at outlet or flowing to outlet:
 inline bool tDF_RunOutNoStop::Start( tDebrisFlow *DF )
-{return ( DF->getAtPtr()->getFlowEdg() > 0 && 
+{return ( DF->getAtPtr()->getFlowEdg() > nullptr && 
          DF->getAtPtr()->getFlowEdg()->getDestinationPtr()->isNonBoundary() );}
 
 // just checks whether already at outlet:
diff --git a/Child/Code/globalFns.cpp b/Child/Code/globalFns.cpp
index 6cf131a..02f36e6 100644
--- a/Child/Code/globalFns.cpp
+++ b/Child/Code/globalFns.cpp
@@ -1008,7 +1008,7 @@ int ScanLineNodesByDistance( tLNode *cn, double maxDist,
 	{
 	  closeEnough = false;
 	  tLNode* nxtPtr = ScanLineNextNode( prvPtr, curPtr, abc ); // global fn
-	  if( nxtPtr > 0 && nxtPtr->isNonBoundary() )
+	  if( nxtPtr > nullptr && nxtPtr->isNonBoundary() )
 	    {
 	      leftList.insertAtFront( nxtPtr );
 	      perpDist += fabs( DotProduct2D( curPtr, nxtPtr, uVec ) );
@@ -1036,7 +1036,7 @@ int ScanLineNodesByDistance( tLNode *cn, double maxDist,
 	{
 	  closeEnough = false;
 	  tLNode* nxtPtr = ScanLineNextNode( prvPtr, curPtr, abc ); // global fn
-	  if( nxtPtr > 0 && nxtPtr->isNonBoundary() )
+	  if( nxtPtr > nullptr && nxtPtr->isNonBoundary() )
 	    {
 	      rightList.insertAtBack( nxtPtr );
 	      perpDist += fabs( DotProduct2D( curPtr, nxtPtr, uVec ) );
diff --git a/Child/Code/tMesh/tMesh.cpp b/Child/Code/tMesh/tMesh.cpp
index 4617fb7..66568b0 100644
--- a/Child/Code/tMesh/tMesh.cpp
+++ b/Child/Code/tMesh/tMesh.cpp
@@ -2745,7 +2745,7 @@ MakeMeshFromPointTilesAndArcGridMask( const tInputFile &infile, tRand &rand )
             if( davlen < oavlen ) cn = dn;
             else cn = on;
           }
-          assert( cn > 0 );
+          assert( cn > nullptr );
           removeList.insertAtBack( cn );
           keepChecking = true;
         }
@@ -4405,7 +4405,7 @@ MakeHullConvex()
       break;
     }
   }
-  assert( bndyedg > 0 );
+  assert( bndyedg > nullptr );
   tPtrList< tSubNode > nbrList;
   tEdge* obedg = bndyedg;
   tSubNode* dn = static_cast<tSubNode*>( bndyedg->getDestinationPtrNC() );
diff --git a/Child/Code/tStreamNet/tStreamNet.cpp b/Child/Code/tStreamNet/tStreamNet.cpp
index 0f29970..7741f0e 100644
--- a/Child/Code/tStreamNet/tStreamNet.cpp
+++ b/Child/Code/tStreamNet/tStreamNet.cpp
@@ -3276,7 +3276,7 @@ void tStreamNet::FindStreamLines( const tInputFile &infile,
         }
       }
     }
-    if( on > 0 )
+    if( on > nullptr )
     {
       // put streamline nodes in list:
       tLNode *dn = 0;
@@ -3291,7 +3291,7 @@ void tStreamNet::FindStreamLines( const tInputFile &infile,
           if( on->Meanders() ) on->setMeanderStatus( false );
         }
         on = dn;
-      } while( dn > 0 && dn->getBoundaryFlag() == kNonBoundary );
+      } while( dn > nullptr && dn->getBoundaryFlag() == kNonBoundary );
     }
     else
       // shouldn't happen
diff --git a/Child/Code/tVegetation/tVegetation.cpp b/Child/Code/tVegetation/tVegetation.cpp
index f4fa701..6fa7bb3 100644
--- a/Child/Code/tVegetation/tVegetation.cpp
+++ b/Child/Code/tVegetation/tVegetation.cpp
@@ -573,7 +573,7 @@ void tForest::TreeFall( tTrees *tree )
       const double segx = tree->getNodePtr()->getX() + dist * cosangle;
       const double segy = tree->getNodePtr()->getY() + dist * sinangle;
       nt = ct->NbrToward( segx, segy );
-      if( nt > 0 )
+      if( nt > nullptr )
 	ct = nt;
       // find which node to give wood:
       int i;
